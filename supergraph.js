export default "\nschema\n  @link(url: \"https://specs.apollo.dev/link/v1.0\")\n  @link(url: \"https://specs.apollo.dev/join/v0.3\", for: EXECUTION)\n  \n  \n  \n  \n  \n  @link(\n  url: \"https://the-guild.dev/graphql/mesh/spec/v1.0\"\n  import: [\"@statusCodeTypeName\", \"@resolveRootField\", \"@resolveRoot\", \"@enum\", \"@httpOperation\", \"@transport\", \"@extraSchemaDefinitionDirective\"]\n)\n{\n  query: Query\n  mutation: Mutation\n  \n}\n\n\n  directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE\n\n  directive @join__field(\n    graph: join__Graph\n    requires: join__FieldSet\n    provides: join__FieldSet\n    type: String\n    external: Boolean\n    override: String\n    usedOverridden: Boolean\n  ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\n  directive @join__graph(name: String!, url: String!) on ENUM_VALUE\n\n  directive @join__implements(\n    graph: join__Graph!\n    interface: String!\n  ) repeatable on OBJECT | INTERFACE\n\n  directive @join__type(\n    graph: join__Graph!\n    key: join__FieldSet\n    extension: Boolean! = false\n    resolvable: Boolean! = true\n    isInterfaceObject: Boolean! = false\n  ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR\n\n  directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION\n\n  scalar join__FieldSet\n\n\n  directive @link(\n    url: String\n    as: String\n    for: link__Purpose\n    import: [link__Import]\n  ) repeatable on SCHEMA\n\n  scalar link__Import\n\n  enum link__Purpose {\n    \"\"\"\n    `SECURITY` features provide metadata necessary to securely resolve fields.\n    \"\"\"\n    SECURITY\n\n    \"\"\"\n    `EXECUTION` features provide metadata necessary for operation execution.\n    \"\"\"\n    EXECUTION\n  }\n\n\n\n\n\n\n\nenum join__Graph {\n  WIKI @join__graph(name: \"Wiki\", url: \"https://wikimedia.org/api/rest_v1\") \n}\n\ndirective @statusCodeTypeName(subgraph: String, typeName: String, statusCode: String)  repeatable on UNION\n\ndirective @resolveRootField(subgraph: String, field: String)  repeatable on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @resolveRoot(subgraph: String)  repeatable on FIELD_DEFINITION\n\ndirective @enum(subgraph: String, value: String)  repeatable on ENUM_VALUE\n\ndirective @httpOperation(\n  subgraph: String\n  path: String\n  operationSpecificHeaders: [[String]]\n  httpMethod: HTTPMethod\n  isBinary: Boolean\n  requestBaseBody: ObjMap\n  queryParamArgMap: ObjMap\n  queryStringOptionsByParam: ObjMap\n  jsonApiFields: Boolean\n  queryStringOptions: ObjMap\n) repeatable on FIELD_DEFINITION\n\ndirective @transport(\n  subgraph: String\n  kind: String\n  location: String\n  headers: [[String]]\n  queryStringOptions: ObjMap\n  queryParams: [[String]]\n) repeatable on SCHEMA\n\ndirective @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT\n\n\"\"\"\nA string that cannot be passed as an empty value\n\"\"\"\nscalar NonEmptyString @join__type(graph: WIKI) \n\n\"\"\"\nThe `BigInt` scalar type represents non-fractional signed whole numeric values.\n\"\"\"\nscalar BigInt @join__type(graph: WIKI) \n\n\"\"\"\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON @join__type(graph: WIKI)  @specifiedBy(\n  url: \"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\"\n)\n\nscalar ObjMap @join__type(graph: WIKI) \n\nscalar _DirectiveExtensions @join__type(graph: WIKI) \n\ntype Query @extraSchemaDefinitionDirective(\n  directives: {transport: [{subgraph: \"Wiki\", kind: \"rest\", location: \"https://wikimedia.org/api/rest_v1\"}]}\n) @join__type(graph: WIKI)  {\n  \"\"\"\n  Gets availability of featured feed content for the apps by wiki domain.\n  \n  Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  \n  \"\"\"\n  feed_availability: feed_availability_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/feed/availability\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json; charset=utf-8; profile=\\\"https://www.mediawiki.org/wiki/Specs/Availability/1.0.1\\\", application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Returns the previously-stored formula via `/media/math/check/{type}` for\n  the given hash.\n  \n  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).\n  \n  \"\"\"\n  media_math_formula_by_hash(\"\"\"\n  The hash string of the previous POST data\n  \"\"\"\n  hash: NonEmptyString!) : problem @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/media/math/formula/{args.hash}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a request hash, renders a TeX formula into its mathematic\n  representation in the given format. When a request is issued to the\n  `/media/math/check/{format}` POST endpoint, the response contains the\n  `x-resource-location` header denoting the hash ID of the POST data. Once\n  obtained, this endpoint has to be used to obtain the actual render.\n  \n  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).\n  \n  \"\"\"\n  media_math_render_by_format_by_hash(\n    format: queryInput_media_math_render_by_format_by_hash_format!\n    \"\"\"\n    The hash string of the previous POST data\n    \"\"\"\n    hash: NonEmptyString!\n  ): problem @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/media/math/render/{args.format}/{args.hash}\"\n    operationSpecificHeaders: [[\"Accept\", \"image/svg+xml, application/mathml+xml, image/png, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date range, returns a timeseries of absolute bytes\n  difference sums. You can filter by editors-type (all-editor-types, anonymous, group-bot,\n  name-bot, user) and page-type (all-page-types, content, non-content). You can choose\n  between daily and monthly granularity as well.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia. For\n    projects like www.mediawiki.org, you can use that full string, or just use mediawiki\n    or mediawiki.org. If you're interested in the aggregation of all projects, use\n    all-projects.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type!\n    page_type: queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type!\n    granularity: queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The date of the first day to include, in YYYYMMDD format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The date of the last day to include, in YYYYMMDD format\n    \"\"\"\n    end: String!\n  ): metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/bytes-difference/absolute/aggregate/{args.project}/{args.editor_type}/{args.page_type}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project, a page-title prefixed with canonical namespace (for\n  instance 'User:Jimbo_Wales') and a date range, returns a timeseries of bytes\n  difference absolute sums. You can filter by editors-type (all-editor-types, anonymous,\n  group-bot, name-bot, user). You can choose between daily and monthly granularity as well.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia. For\n    projects like www.mediawiki.org, you can use that full string, or just use mediawiki\n    or mediawiki.org.\n    \"\"\"\n    project: String!\n    \"\"\"\n    The page-title to request absolute bytes-difference for. Should be prefixed with the\n    page canonical namespace.\n    \"\"\"\n    page_title: String!\n    editor_type: queryInput_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type!\n    granularity: queryInput_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The date of the first day to include, in YYYYMMDD format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The date of the last day to include, in YYYYMMDD format\n    \"\"\"\n    end: String!\n  ): metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/bytes-difference/absolute/per-page/{args.project}/{args.page_title}/{args.editor_type}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date range, returns a timeseries of bytes difference net\n  sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot,\n  user) and page-type (all-page-types, content or non-content). You can choose between\n  daily and monthly granularity as well.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia. For\n    projects like www.mediawiki.org, you can use that full string, or just use mediawiki\n    or mediawiki.org. If you're interested in the aggregation of all projects, use\n    all-projects.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type!\n    page_type: queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type!\n    granularity: queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The date of the first day to include, in YYYYMMDD format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The date of the last day to include, in YYYYMMDD format\n    \"\"\"\n    end: String!\n  ): metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/bytes-difference/net/aggregate/{args.project}/{args.editor_type}/{args.page_type}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project, a page-title prefixed with canonical namespace (for\n  instance 'User:Jimbo_Wales') and a date range, returns a timeseries of bytes\n  difference net sums. You can filter by editors-type (all-editor-types, anonymous,\n  group-bot, name-bot, user). You can choose between daily and monthly granularity as well.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia. For\n    projects like www.mediawiki.org, you can use that full string, or just use mediawiki\n    or mediawiki.org.\n    \"\"\"\n    project: String!\n    \"\"\"\n    The page-title to request net bytes-difference for. Should be prefixed with the\n    page canonical namespace.\n    \"\"\"\n    page_title: String!\n    editor_type: queryInput_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type!\n    granularity: queryInput_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The date of the first day to include, in YYYYMMDD format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The date of the last day to include, in YYYYMMDD format\n    \"\"\"\n    end: String!\n  ): metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/bytes-difference/net/per-page/{args.project}/{args.page_title}/{args.editor_type}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date range, returns a timeseries of its edited-pages counts.\n  You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user),\n  page-type (all-page-types, content or non-content) or activity-level (1..4-edits,\n  5..24-edits, 25..99-edits, 100..-edits). You can choose between daily and monthly\n  granularity as well.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off.  For projects like commons without language codes, use commons.wikimedia.\n    For projects like www.mediawiki.org, you can use that full string, or just use\n    mediawiki or mediawiki.org.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type!\n    page_type: queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type!\n    activity_level: queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level!\n    granularity: queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The date of the first day to include, in YYYYMMDD format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The date of the last day to include, in YYYYMMDD format\n    \"\"\"\n    end: String!\n  ): metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/edited-pages/aggregate/{args.project}/{args.editor_type}/{args.page_type}/{args.activity_level}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date range, returns a timeseries of its new pages counts.\n  You can filter by editor type (all-editor-types, anonymous, group-bot, name-bot, user)\n  or page-type (all-page-types, content or non-content). You can choose between daily and\n  monthly granularity as well.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off.  For projects like commons without language codes, use commons.wikimedia.\n    For projects like www.mediawiki.org, you can use that full string, or just use\n    mediawiki or mediawiki.org. If you're interested in the aggregation of all\n    projects, use all-projects.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type!\n    page_type: queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type!\n    granularity: queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The date of the first day to include, in YYYYMMDD format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The date of the last day to include, in YYYYMMDD format\n    \"\"\"\n    end: String!\n  ): metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/edited-pages/new/{args.project}/{args.editor_type}/{args.page_type}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100\n  edited-pages by absolute bytes-difference. You can filter by editor-type (all-editor-types,\n  anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia. For\n    projects like www.mediawiki.org, you can use that full string, or just use mediawiki\n    or mediawiki.org.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!\n    page_type: queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!\n    \"\"\"\n    The year of the date for which to retrieve top edited-pages, in YYYY format.\n    \"\"\"\n    year: String!\n    \"\"\"\n    The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.\n    \"\"\"\n    month: String!\n    \"\"\"\n    The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.\n    \"\"\"\n    day: String!\n  ): metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/edited-pages/top-by-absolute-bytes-difference/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date (day or month), returns a timeseries of the top\n  100 edited-pages by edits count. You can filter by editor-type (all-editor-types,\n  anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or\n  non-content).\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia. For\n    projects like www.mediawiki.org, you can use that full string, or just use mediawiki\n    or mediawiki.org.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!\n    page_type: queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!\n    \"\"\"\n    The year of the date for which to retrieve top edited-pages, in YYYY format.\n    \"\"\"\n    year: String!\n    \"\"\"\n    The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.\n    \"\"\"\n    month: String!\n    \"\"\"\n    The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.\n    \"\"\"\n    day: String!\n  ): metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/edited-pages/top-by-edits/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100\n  edited-pages by net bytes-difference. You can filter by editor-type (all-editor-types,\n  anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia. For\n    projects like www.mediawiki.org, you can use that full string, or just use mediawiki\n    or mediawiki.org.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!\n    page_type: queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!\n    \"\"\"\n    The year of the date for which to retrieve top edited-pages, in YYYY format.\n    \"\"\"\n    year: String!\n    \"\"\"\n    The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.\n    \"\"\"\n    month: String!\n    \"\"\"\n    The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.\n    \"\"\"\n    day: String!\n  ): metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/edited-pages/top-by-net-bytes-difference/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date range, returns a timeseries of its editors counts.\n  You can filter by editory-type (all-editor-types, anonymous, group-bot, name-bot, user),\n  page-type (all-page-types, content or non-content) or activity-level (1..4-edits,\n  5..24-edits, 25..99-edits or 100..-edits). You can choose between daily and monthly\n  granularity as well.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off.  For projects like commons without language codes, use commons.wikimedia.\n    For projects like www.mediawiki.org, you can use that full string, or just use\n    mediawiki or mediawiki.org.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type!\n    page_type: queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type!\n    activity_level: queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level!\n    granularity: queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The date of the first day to include, in YYYYMMDD format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The date of the last day to include, in YYYYMMDD format\n    \"\"\"\n    end: String!\n  ): metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/editors/aggregate/{args.project}/{args.editor_type}/{args.page_type}/{args.activity_level}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100\n  editors by absolute bytes-difference. You can filter by editor-type (all-editor-types,\n  anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).\n  The user_text returned is either the mediawiki user_text if the user is registered, or\n  null if user is anonymous.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia. For\n    projects like www.mediawiki.org, you can use that full string, or just use mediawiki\n    or mediawiki.org.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!\n    page_type: queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!\n    \"\"\"\n    The year of the date for which to retrieve top editors, in YYYY format.\n    \"\"\"\n    year: String!\n    \"\"\"\n    The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.\n    \"\"\"\n    month: String!\n    \"\"\"\n    The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.\n    \"\"\"\n    day: String!\n  ): metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/editors/top-by-absolute-bytes-difference/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date (day or month), returns a timeseries of the top\n  100 editors by edits count. You can filter by editor-type (all-editor-types,\n  anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or\n  non-content). The user_text returned is either the mediawiki user_text if the user is\n  registered, or null if user is anonymous.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia. For\n    projects like www.mediawiki.org, you can use that full string, or just use mediawiki\n    or mediawiki.org.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!\n    page_type: queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!\n    \"\"\"\n    The year of the date for which to retrieve top editors, in YYYY format.\n    \"\"\"\n    year: String!\n    \"\"\"\n    The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.\n    \"\"\"\n    month: String!\n    \"\"\"\n    The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.\n    \"\"\"\n    day: String!\n  ): metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/editors/top-by-edits/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100\n  editors by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous,\n  group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The\n  user_text returned is either the mediawiki user_text if the user is registered, or\n  \"Anonymous Editor\" if user is anonymous.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia. For\n    projects like www.mediawiki.org, you can use that full string, or just use mediawiki\n    or mediawiki.org.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!\n    page_type: queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!\n    \"\"\"\n    The year of the date for which to retrieve top editors, in YYYY format.\n    \"\"\"\n    year: String!\n    \"\"\"\n    The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.\n    \"\"\"\n    month: String!\n    \"\"\"\n    The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.\n    \"\"\"\n    day: String!\n  ): metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/editors/top-by-net-bytes-difference/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date range, returns a timeseries of edits counts.\n  You can filter by editors-type (all-editor-types, anonymous, bot, registered) and\n  page-type (all-page-types, content or non-content). You can choose between daily and\n  monthly granularity as well.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off.  For projects like commons without language codes, use commons.wikimedia.\n    For projects like www.mediawiki.org, you can use that full string, or just use\n    mediawiki or mediawiki.org. If you're interested in the aggregation of\n    all projects, use all-projects.\n    \"\"\"\n    project: String!\n    editor_type: queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type!\n    page_type: queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type!\n    granularity: queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The date of the first day to include, in YYYYMMDD format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The date of the last day to include, in YYYYMMDD format\n    \"\"\"\n    end: String!\n  ): metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/edits/aggregate/{args.project}/{args.editor_type}/{args.page_type}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project, a page-title prefixed with its canonical namespace (for\n  instance 'User:Jimbo_Wales') and a date range, returns a timeseries of edit counts.\n  You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user).\n  You can choose between daily and monthly granularity as well.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia. For\n    projects like www.mediawiki.org, you can use that full string, or just use mediawiki\n    or mediawiki.org.\n    \"\"\"\n    project: String!\n    \"\"\"\n    The page-title to request edits for. It should be prefixed with canonical namespace.\n    Spaces will be converted to underscores.\n    \"\"\"\n    page_title: String!\n    editor_type: queryInput_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type!\n    granularity: queryInput_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The date of the first day to include, in YYYYMMDD format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The date of the last day to include, in YYYYMMDD format\n    \"\"\"\n    end: String!\n  ): metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/edits/per-page/{args.project}/{args.page_title}/{args.editor_type}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a project and a date range, returns a timeseries of pagecounts.\n  You can filter by access site (mobile or desktop) and you can choose between monthly,\n  daily and hourly granularity as well.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 100 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off. For projects like commons without language codes, use commons.wikimedia.\n    \"\"\"\n    project: String!\n    access_site: queryInput_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_access_site!\n    granularity: queryInput_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The timestamp of the first hour/day/month to include, in YYYYMMDDHH format.\n    \"\"\"\n    start: String!\n    \"\"\"\n    The timestamp of the last hour/day/month to include, in YYYYMMDDHH format.\n    In hourly and daily granularities this value is inclusive, in the monthly granularity\n    this value is exclusive.\n    \"\"\"\n    end: String!\n  ): metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/legacy/pagecounts/aggregate/{args.project}/{args.access_site}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a date range, returns a timeseries of pageview counts. You can filter by project,\n  access method and/or agent type. You can choose between daily and hourly granularity\n  as well.\n  \n  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n  - Rate limit: 100 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end(\n    \"\"\"\n    If you want to filter by project, use the domain of any Wikimedia project,\n    for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.\n    If you are interested in all pageviews regardless of project, use all-projects.\n    \"\"\"\n    project: String!\n    access: queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_access!\n    agent: queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_agent!\n    granularity: queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The timestamp of the first hour/day/month to include, in YYYYMMDDHH format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The timestamp of the last hour/day/month to include, in YYYYMMDDHH format\n    \"\"\"\n    end: String!\n  ): metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/pageviews/aggregate/{args.project}/{args.access}/{args.agent}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki article and a date range, returns a daily timeseries of its pageview\n  counts. You can also filter by access method and/or agent type.\n  \n  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n  - Rate limit: 100 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end(\n    \"\"\"\n    If you want to filter by project, use the domain of any Wikimedia project,\n    for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.\n    \"\"\"\n    project: String!\n    access: queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_access!\n    agent: queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_agent!\n    \"\"\"\n    'The title of any article in the specified project. Any spaces should be replaced\n    with underscores. It also should be URI-encoded, so that non-URI-safe characters like\n    %, / or ? are accepted. Example: Are_You_the_One%3F'.\n    \"\"\"\n    article: String!\n    granularity: queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The date of the first day to include, in YYYYMMDD or YYYYMMDDHH format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The date of the last day to include, in YYYYMMDD or YYYYMMDDHH format\n    \"\"\"\n    end: String!\n  ): metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/pageviews/per-article/{args.project}/{args.access}/{args.agent}/{args.article}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Lists the pageviews to this project, split by country of origin for a given month.\n  Because of privacy reasons, pageviews are given in a bucketed format, and countries\n  with less than 100 views do not get reported.\n  Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 100 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month(\n    \"\"\"\n    If you want to filter by project, use the domain of any Wikimedia project,\n    for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.\n    \"\"\"\n    project: String!\n    access: queryInput_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_access!\n    \"\"\"\n    The year of the date for which to retrieve top countries, in YYYY format.\n    \"\"\"\n    year: String!\n    \"\"\"\n    The month of the date for which to retrieve top countries, in MM format.\n    \"\"\"\n    month: String!\n  ): metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/pageviews/top-by-country/{args.project}/{args.access}/{args.year}/{args.month}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Lists the 1000 most viewed articles for a given project and timespan (month or day).\n  You can filter by access method.\n  \n  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n  - Rate limit: 100 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day(\n    \"\"\"\n    If you want to filter by project, use the domain of any Wikimedia project,\n    for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.\n    \"\"\"\n    project: String!\n    access: queryInput_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_access!\n    \"\"\"\n    The year of the date for which to retrieve top articles, in YYYY format.\n    \"\"\"\n    year: String!\n    \"\"\"\n    The month of the date for which to retrieve top articles, in MM format. If you want\n    to get the top articles of a whole month, the day parameter should be all-days.\n    \"\"\"\n    month: String!\n    \"\"\"\n    The day of the date for which to retrieve top articles, in DD format.\n    \"\"\"\n    day: String!\n  ): metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/pageviews/top/{args.project}/{args.access}/{args.year}/{args.month}/{args.day}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a Mediawiki project and a date range, returns a timeseries of its newly registered\n  users counts. You can choose between daily and monthly granularity. The newly registered\n  users value is computed with self-created users only, not auto-login created ones.\n  \n  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n  - Rate limit: 25 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_registered_users_new_by_project_by_granularity_by_start_by_end(\n    \"\"\"\n    The name of any Wikimedia project formatted like {language code}.{project name},\n    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\n    off.  For projects like commons without language codes, use commons.wikimedia.\n    For projects like www.mediawiki.org, you can use that full string, or just use\n    mediawiki or mediawiki.org. If you're interested in the aggregation of\n    all projects, use all.\n    \"\"\"\n    project: String!\n    granularity: queryInput_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The date of the first day to include, in YYYYMMDD format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The date of the last day to include, in YYYYMMDD format\n    \"\"\"\n    end: String!\n  ): metrics_registered_users_new_by_project_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/registered-users/new/{args.project}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Given a project and a date range, returns a timeseries of unique devices counts.\n  You need to specify a project, and can filter by accessed site (mobile or desktop).\n  You can choose between daily and hourly granularity as well.\n  \n  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n  - Rate limit: 100 req/s\n  - License: Data accessible via this endpoint is available under the\n    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n  \n  \"\"\"\n  metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end(\n    \"\"\"\n    If you want to filter by project, use the domain of any Wikimedia project,\n    for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.\n    \"\"\"\n    project: String!\n    access_site: queryInput_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_access_site!\n    granularity: queryInput_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_granularity!\n    \"\"\"\n    The timestamp of the first day/month to include, in YYYYMMDD format\n    \"\"\"\n    start: String!\n    \"\"\"\n    The timestamp of the last day/month to include, in YYYYMMDD format\n    \"\"\"\n    end: String!\n  ): metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/metrics/unique-devices/{args.project}/{args.access_site}/{args.granularity}/{args.start}/{args.end}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Fetches the list of language pairs the back-end service can translate\n  \n  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n  \n  \"\"\"\n  transform_list_languagepairs: cx_languagepairs @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/transform/list/languagepairs/\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Fetches the list of tools that are available for the given pair of languages.\n  \n  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n  \n  \"\"\"\n  transform_list_pair_by_from_by_to(\n    \"\"\"\n    The source language code\n    \"\"\"\n    from: String!\n    \"\"\"\n    The target language code\n    \"\"\"\n    to: String!\n  ): transform_list_pair_by_from_by_to_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/transform/list/pair/{args.from}/{args.to}/\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Fetches the list of tools and all of the language pairs it can translate\n  \n  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n  \n  \"\"\"\n  transform_list_tool_by_tool(tool: queryInput_transform_list_tool_by_tool_tool!) : transform_list_tool_by_tool_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/transform/list/tool/{args.tool}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Fetches the list of tools and all of the language pairs it can translate\n  \n  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n  \n  \"\"\"\n  transform_list_tool_by_tool_by_from(\n    tool: queryInput_transform_list_tool_by_tool_by_from_tool!\n    \"\"\"\n    The source language code\n    \"\"\"\n    from: String!\n  ): transform_list_tool_by_tool_by_from_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/transform/list/tool/{args.tool}/{args.from}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Fetches the list of tools and all of the language pairs it can translate\n  \n  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n  \n  \"\"\"\n  transform_list_tool_by_tool_by_from_by_to(\n    tool: queryInput_transform_list_tool_by_tool_by_from_by_to_tool!\n    \"\"\"\n    The source language code\n    \"\"\"\n    from: String!\n    \"\"\"\n    The target language code\n    \"\"\"\n    to: String!\n  ): transform_list_tool_by_tool_by_from_by_to_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/transform/list/tool/{args.tool}/{args.from}/{args.to}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Fetches the dictionary meaning of a word from a language and displays\n  it in the target language.\n  \n  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n  \n  \"\"\"\n  transform_word_from_by_from_lang_to_by_to_lang_by_word(\n    \"\"\"\n    The source language code\n    \"\"\"\n    from_lang: String!\n    \"\"\"\n    The target language code\n    \"\"\"\n    to_lang: String!\n    \"\"\"\n    The word to lookup\n    \"\"\"\n    word: String!\n  ): transform_word_from_by_from_lang_to_by_to_lang_by_word_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/transform/word/from/{args.from_lang}/to/{args.to_lang}/{args.word}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n  \"\"\"\n  Fetches the dictionary meaning of a word from a language and displays\n  it in the target language.\n  \n  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n  \n  \"\"\"\n  transform_word_from_by_from_lang_to_by_to_lang_by_word_by_provider(\n    \"\"\"\n    The source language code\n    \"\"\"\n    from_lang: String!\n    \"\"\"\n    The target language code\n    \"\"\"\n    to_lang: String!\n    \"\"\"\n    The word to lookup\n    \"\"\"\n    word: String!\n    provider: queryInput_transform_word_from_by_from_lang_to_by_to_lang_by_word_by_provider_provider!\n  ): transform_word_from_by_from_lang_to_by_to_lang_by_word_by_provider_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/transform/word/from/{args.from_lang}/to/{args.to_lang}/{args.word}/{args.provider}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: GET\n  )\n}\n\ntype availability @join__type(graph: WIKI)  {\n  \"\"\"\n  domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project\n  \"\"\"\n  in_the_news: [String]!\n  \"\"\"\n  domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project\n  \"\"\"\n  most_read: [String]!\n  \"\"\"\n  domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project\n  \"\"\"\n  on_this_day: [String]!\n  \"\"\"\n  domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project\n  \"\"\"\n  picture_of_the_day: [String]!\n  \"\"\"\n  domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project\n  \"\"\"\n  todays_featured_article: [String]!\n}\n\ntype problem @join__type(graph: WIKI)  {\n  detail: String\n  method: String\n  status: Int\n  title: String\n  type: String!\n  uri: String\n}\n\ntype absolute_bytes_difference @join__type(graph: WIKI)  {\n  items: [query_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  abs_bytes_diff: BigInt\n  timestamp: String\n}\n\ntype absolute_bytes_difference_per_page @join__type(graph: WIKI)  {\n  items: [query_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_title: String @resolveRootField(subgraph: \"Wiki\", field: \"page-title\") \n  project: String\n  results: [query_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  abs_bytes_diff: BigInt\n  timestamp: String\n}\n\ntype net_bytes_difference @join__type(graph: WIKI)  {\n  items: [query_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  net_bytes_diff: BigInt\n  timestamp: String\n}\n\ntype net_bytes_difference_per_page @join__type(graph: WIKI)  {\n  items: [query_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_title: String @resolveRootField(subgraph: \"Wiki\", field: \"page-title\") \n  project: String\n  results: [query_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  net_bytes_diff: BigInt\n  timestamp: String\n}\n\ntype edited_pages @join__type(graph: WIKI)  {\n  items: [query_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  activity_level: String @resolveRootField(subgraph: \"Wiki\", field: \"activity-level\") \n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  edited_pages: Int\n  timestamp: String\n}\n\ntype new_pages @join__type(graph: WIKI)  {\n  items: [query_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  new_pages: Int\n  timestamp: String\n}\n\ntype top_edited_pages_by_abs_bytes_diff @join__type(graph: WIKI)  {\n  items: [query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items]\n}\n\ntype query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  timestamp: String\n  top: [query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items]\n}\n\ntype query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items @join__type(graph: WIKI)  {\n  abs_bytes_diff: BigInt\n  page_title: String\n  rank: Int\n}\n\ntype top_edited_pages_by_edits @join__type(graph: WIKI)  {\n  items: [query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items]\n}\n\ntype query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  timestamp: String\n  top: [query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items]\n}\n\ntype query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items @join__type(graph: WIKI)  {\n  edits: BigInt\n  page_title: String\n  rank: Int\n}\n\ntype top_edited_pages_by_net_bytes_diff @join__type(graph: WIKI)  {\n  items: [query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items]\n}\n\ntype query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  timestamp: String\n  top: [query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items]\n}\n\ntype query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items @join__type(graph: WIKI)  {\n  net_bytes_diff: BigInt\n  page_title: String\n  rank: Int\n}\n\ntype editors @join__type(graph: WIKI)  {\n  items: [query_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  activity_level: String @resolveRootField(subgraph: \"Wiki\", field: \"activity-level\") \n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  editors: Int\n  timestamp: String\n}\n\ntype top_editors_by_abs_bytes_diff @join__type(graph: WIKI)  {\n  items: [query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items]\n}\n\ntype query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  timestamp: String\n  top: [query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items]\n}\n\ntype query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items @join__type(graph: WIKI)  {\n  abs_bytes_diff: BigInt\n  rank: Int\n  user_text: String\n}\n\ntype top_editors_by_edits @join__type(graph: WIKI)  {\n  items: [query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items]\n}\n\ntype query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  timestamp: String\n  top: [query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items]\n}\n\ntype query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items @join__type(graph: WIKI)  {\n  edits: BigInt\n  rank: Int\n  user_text: String\n}\n\ntype top_editors_by_net_bytes_diff @join__type(graph: WIKI)  {\n  items: [query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items]\n}\n\ntype query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  timestamp: String\n  top: [query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items]\n}\n\ntype query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_oneOf_0_items_items_results_items_top_items @join__type(graph: WIKI)  {\n  net_bytes_diff: BigInt\n  rank: Int\n  user_text: String\n}\n\ntype edits @join__type(graph: WIKI)  {\n  items: [query_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_type: String @resolveRootField(subgraph: \"Wiki\", field: \"page-type\") \n  project: String\n  results: [query_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  edits: BigInt\n  timestamp: String\n}\n\ntype edits_per_page @join__type(graph: WIKI)  {\n  items: [query_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  editor_type: String @resolveRootField(subgraph: \"Wiki\", field: \"editor-type\") \n  granularity: String\n  page_title: String @resolveRootField(subgraph: \"Wiki\", field: \"page-title\") \n  project: String\n  results: [query_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  edits: BigInt\n  timestamp: String\n}\n\ntype pagecounts_project @join__type(graph: WIKI)  {\n  items: [query_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  access_site: String @resolveRootField(subgraph: \"Wiki\", field: \"access-site\") \n  count: BigInt\n  granularity: String\n  project: String\n  timestamp: String\n}\n\ntype pageview_project @join__type(graph: WIKI)  {\n  items: [query_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  access: String\n  agent: String\n  granularity: String\n  project: String\n  timestamp: String\n  views: BigInt\n}\n\ntype pageview_article @join__type(graph: WIKI)  {\n  items: [query_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  access: String\n  agent: String\n  article: String\n  granularity: String\n  project: String\n  timestamp: String\n  views: BigInt\n}\n\ntype by_country @join__type(graph: WIKI)  {\n  items: [query_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_oneOf_0_items_items]\n}\n\ntype query_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_oneOf_0_items_items @join__type(graph: WIKI)  {\n  access: String\n  countries: [query_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_oneOf_0_items_items_countries_items]\n  month: String\n  project: String\n  year: String\n}\n\ntype query_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_oneOf_0_items_items_countries_items @join__type(graph: WIKI)  {\n  country: String\n  rank: Int\n  views: BigInt\n}\n\ntype pageview_tops @join__type(graph: WIKI)  {\n  items: [query_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_oneOf_0_items_items]\n}\n\ntype query_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_oneOf_0_items_items @join__type(graph: WIKI)  {\n  access: String\n  articles: [query_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_oneOf_0_items_items_articles_items]\n  day: String\n  month: String\n  project: String\n  year: String\n}\n\ntype query_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_oneOf_0_items_items_articles_items @join__type(graph: WIKI)  {\n  article: String\n  rank: Int\n  views: BigInt\n}\n\ntype new_registered_users @join__type(graph: WIKI)  {\n  items: [query_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  granularity: String\n  project: String\n  results: [query_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_oneOf_0_items_items_results_items]\n}\n\ntype query_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_oneOf_0_items_items_results_items @join__type(graph: WIKI)  {\n  new_registered_users: Int\n  timestamp: String\n}\n\ntype unique_devices @join__type(graph: WIKI)  {\n  items: [query_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_oneOf_0_items_items]\n}\n\ntype query_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_oneOf_0_items_items @join__type(graph: WIKI)  {\n  access_site: String @resolveRootField(subgraph: \"Wiki\", field: \"access-site\") \n  devices: BigInt\n  granularity: String\n  project: String\n  timestamp: String\n}\n\ntype cx_languagepairs @join__type(graph: WIKI)  {\n  \"\"\"\n  the list of available source languages\n  \"\"\"\n  source: [String]\n  \"\"\"\n  the list of available destination languages\n  \"\"\"\n  target: [String]\n}\n\ntype cx_list_tools @join__type(graph: WIKI)  {\n  \"\"\"\n  the list of tools available for the given language pair\n  \"\"\"\n  tools: [String]\n}\n\ntype JSON_container @join__type(graph: WIKI)  {\n  JSON: JSON @resolveRoot(subgraph: \"Wiki\") \n}\n\ntype cx_dict @join__type(graph: WIKI)  {\n  \"\"\"\n  the original word to look up\n  \"\"\"\n  source: String\n  \"\"\"\n  the translations found\n  \"\"\"\n  translations: [query_transform_word_from_by_from_lang_to_by_to_lang_by_word_oneOf_0_translations_items]\n}\n\ntype query_transform_word_from_by_from_lang_to_by_to_lang_by_word_oneOf_0_translations_items @join__type(graph: WIKI)  {\n  \"\"\"\n  extra information about the phrase\n  \"\"\"\n  info: String\n  \"\"\"\n  the translated phrase\n  \"\"\"\n  phrase: String\n  \"\"\"\n  the source dictionary used for the translation\n  \"\"\"\n  sources: String\n}\n\ntype Mutation @join__type(graph: WIKI)  {\n  \"\"\"\n  Checks the supplied TeX formula for correctness and returns the\n  normalised formula representation as well as information about\n  identifiers. Available types are tex and inline-tex. The response\n  contains the `x-resource-location` header which can be used to retrieve\n  the render of the checked formula in one of the supported rendering\n  formats. Just append the value of the header to `/media/math/{format}/`\n  and perform a GET request against that URL.\n  \n  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).\n  \n  \"\"\"\n  post_media_math_check_by_type(type: mutationInput_post_media_math_check_by_type_type!) : problem @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/media/math/check/{args.type}\"\n    operationSpecificHeaders: [[\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: POST\n  )\n  \"\"\"\n  Fetches the machine translation for the posted content from the source\n  to the destination language.\n  \n  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n  \n  \"\"\"\n  post_transform_html_from_by_from_lang_to_by_to_lang(\n    \"\"\"\n    The source language code\n    \"\"\"\n    from_lang: String!\n    \"\"\"\n    The target language code\n    \"\"\"\n    to_lang: String!\n  ): post_transform_html_from_by_from_lang_to_by_to_lang_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/transform/html/from/{args.from_lang}/to/{args.to_lang}\"\n    operationSpecificHeaders: [[\"Content-Type\", \"application/x-www-form-urlencoded\"], [\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: POST\n  )\n  \"\"\"\n  Fetches the machine translation for the posted content from the source\n  to the destination language.\n  \n  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n  \n  \"\"\"\n  post_transform_html_from_by_from_lang_to_by_to_lang_by_provider(\n    \"\"\"\n    The source language code\n    \"\"\"\n    from_lang: String!\n    \"\"\"\n    The target language code\n    \"\"\"\n    to_lang: String!\n    provider: mutationInput_post_transform_html_from_by_from_lang_to_by_to_lang_by_provider_provider!\n  ): post_transform_html_from_by_from_lang_to_by_to_lang_by_provider_response @httpOperation(\n    subgraph: \"Wiki\"\n    path: \"/transform/html/from/{args.from_lang}/to/{args.to_lang}/{args.provider}\"\n    operationSpecificHeaders: [[\"Content-Type\", \"application/x-www-form-urlencoded\"], [\"Accept\", \"application/json, application/problem+json\"]]\n    httpMethod: POST\n  )\n}\n\ntype cx_mt @join__type(graph: WIKI)  {\n  \"\"\"\n  the translated content\n  \"\"\"\n  contents: String\n}\n\nunion feed_availability_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"availability\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"availability\")  @join__unionMember(graph: WIKI, member: \"problem\")  = availability | problem\n\nunion metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"absolute_bytes_difference\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"absolute_bytes_difference\")  @join__unionMember(graph: WIKI, member: \"problem\")  = absolute_bytes_difference | problem\n\nunion metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_response @statusCodeTypeName(\n  subgraph: \"Wiki\"\n  statusCode: \"200\"\n  typeName: \"absolute_bytes_difference_per_page\"\n) @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"absolute_bytes_difference_per_page\")  @join__unionMember(graph: WIKI, member: \"problem\")  = absolute_bytes_difference_per_page | problem\n\nunion metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"net_bytes_difference\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"net_bytes_difference\")  @join__unionMember(graph: WIKI, member: \"problem\")  = net_bytes_difference | problem\n\nunion metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_response @statusCodeTypeName(\n  subgraph: \"Wiki\"\n  statusCode: \"200\"\n  typeName: \"net_bytes_difference_per_page\"\n) @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"net_bytes_difference_per_page\")  @join__unionMember(graph: WIKI, member: \"problem\")  = net_bytes_difference_per_page | problem\n\nunion metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"edited_pages\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"edited_pages\")  @join__unionMember(graph: WIKI, member: \"problem\")  = edited_pages | problem\n\nunion metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"new_pages\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"new_pages\")  @join__unionMember(graph: WIKI, member: \"problem\")  = new_pages | problem\n\nunion metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @statusCodeTypeName(\n  subgraph: \"Wiki\"\n  statusCode: \"200\"\n  typeName: \"top_edited_pages_by_abs_bytes_diff\"\n) @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"top_edited_pages_by_abs_bytes_diff\")  @join__unionMember(graph: WIKI, member: \"problem\")  = top_edited_pages_by_abs_bytes_diff | problem\n\nunion metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"top_edited_pages_by_edits\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"top_edited_pages_by_edits\")  @join__unionMember(graph: WIKI, member: \"problem\")  = top_edited_pages_by_edits | problem\n\nunion metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @statusCodeTypeName(\n  subgraph: \"Wiki\"\n  statusCode: \"200\"\n  typeName: \"top_edited_pages_by_net_bytes_diff\"\n) @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"top_edited_pages_by_net_bytes_diff\")  @join__unionMember(graph: WIKI, member: \"problem\")  = top_edited_pages_by_net_bytes_diff | problem\n\nunion metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"editors\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"editors\")  @join__unionMember(graph: WIKI, member: \"problem\")  = editors | problem\n\nunion metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @statusCodeTypeName(\n  subgraph: \"Wiki\"\n  statusCode: \"200\"\n  typeName: \"top_editors_by_abs_bytes_diff\"\n) @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"top_editors_by_abs_bytes_diff\")  @join__unionMember(graph: WIKI, member: \"problem\")  = top_editors_by_abs_bytes_diff | problem\n\nunion metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"top_editors_by_edits\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"top_editors_by_edits\")  @join__unionMember(graph: WIKI, member: \"problem\")  = top_editors_by_edits | problem\n\nunion metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_response @statusCodeTypeName(\n  subgraph: \"Wiki\"\n  statusCode: \"200\"\n  typeName: \"top_editors_by_net_bytes_diff\"\n) @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"top_editors_by_net_bytes_diff\")  @join__unionMember(graph: WIKI, member: \"problem\")  = top_editors_by_net_bytes_diff | problem\n\nunion metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"edits\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"edits\")  @join__unionMember(graph: WIKI, member: \"problem\")  = edits | problem\n\nunion metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"edits_per_page\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"edits_per_page\")  @join__unionMember(graph: WIKI, member: \"problem\")  = edits_per_page | problem\n\nunion metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"pagecounts_project\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"pagecounts_project\")  @join__unionMember(graph: WIKI, member: \"problem\")  = pagecounts_project | problem\n\nunion metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"pageview_project\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"pageview_project\")  @join__unionMember(graph: WIKI, member: \"problem\")  = pageview_project | problem\n\nunion metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"pageview_article\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"pageview_article\")  @join__unionMember(graph: WIKI, member: \"problem\")  = pageview_article | problem\n\nunion metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"by_country\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"by_country\")  @join__unionMember(graph: WIKI, member: \"problem\")  = by_country | problem\n\nunion metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"pageview_tops\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"pageview_tops\")  @join__unionMember(graph: WIKI, member: \"problem\")  = pageview_tops | problem\n\nunion metrics_registered_users_new_by_project_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"new_registered_users\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"new_registered_users\")  @join__unionMember(graph: WIKI, member: \"problem\")  = new_registered_users | problem\n\nunion metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"unique_devices\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"unique_devices\")  @join__unionMember(graph: WIKI, member: \"problem\")  = unique_devices | problem\n\nunion transform_list_pair_by_from_by_to_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"cx_list_tools\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"cx_list_tools\")  @join__unionMember(graph: WIKI, member: \"problem\")  = cx_list_tools | problem\n\nunion transform_list_tool_by_tool_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"JSON_container\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"JSON_container\")  @join__unionMember(graph: WIKI, member: \"problem\")  = JSON_container | problem\n\nunion transform_list_tool_by_tool_by_from_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"JSON_container\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"JSON_container\")  @join__unionMember(graph: WIKI, member: \"problem\")  = JSON_container | problem\n\nunion transform_list_tool_by_tool_by_from_by_to_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"JSON_container\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"JSON_container\")  @join__unionMember(graph: WIKI, member: \"problem\")  = JSON_container | problem\n\nunion transform_word_from_by_from_lang_to_by_to_lang_by_word_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"cx_dict\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"cx_dict\")  @join__unionMember(graph: WIKI, member: \"problem\")  = cx_dict | problem\n\nunion transform_word_from_by_from_lang_to_by_to_lang_by_word_by_provider_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"cx_dict\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"cx_dict\")  @join__unionMember(graph: WIKI, member: \"problem\")  = cx_dict | problem\n\nunion post_transform_html_from_by_from_lang_to_by_to_lang_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"cx_mt\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"cx_mt\")  @join__unionMember(graph: WIKI, member: \"problem\")  = cx_mt | problem\n\nunion post_transform_html_from_by_from_lang_to_by_to_lang_by_provider_response @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"200\", typeName: \"cx_mt\")  @statusCodeTypeName(subgraph: \"Wiki\", statusCode: \"default\", typeName: \"problem\")  @join__type(graph: WIKI)  @join__unionMember(graph: WIKI, member: \"cx_mt\")  @join__unionMember(graph: WIKI, member: \"problem\")  = cx_mt | problem\n\n\"\"\"\nThe output format; can be svg or mml\n\"\"\"\nenum queryInput_media_math_render_by_format_by_hash_format @join__type(graph: WIKI)  {\n  svg @join__enumValue(graph: WIKI) \n  mml @join__enumValue(graph: WIKI) \n  png @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nTime unit for the response data. As of today, supported values are daily and monthly\n\"\"\"\nenum queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nTime unit for the response data. As of today, supported values are daily and monthly\n\"\"\"\nenum queryInput_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nTime unit for the response data. As of today, supported values are daily and monthly\n\"\"\"\nenum queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nTime unit for the response data. As of today, supported values are daily and monthly\n\"\"\"\nenum queryInput_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (edited-pages in content\nnamespaces) or non-content (edited-pages in non-content namespaces). If you are\ninterested in edited-pages regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by activity-level, use one of 1..4-edits, 5..24-edits,\n25..99-edits or 100..-edits. If you are interested in edited-pages regardless\nof their activity level, use all-activity-levels.\n\"\"\"\nenum queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level @join__type(graph: WIKI)  {\n  all_activity_levels @enum(subgraph: \"Wiki\", value: \"\\\"all-activity-levels\\\"\")  @join__enumValue(graph: WIKI) \n  _1__4_edits @enum(subgraph: \"Wiki\", value: \"\\\"1..4-edits\\\"\")  @join__enumValue(graph: WIKI) \n  _5__24_edits @enum(subgraph: \"Wiki\", value: \"\\\"5..24-edits\\\"\")  @join__enumValue(graph: WIKI) \n  _25__99_edits @enum(subgraph: \"Wiki\", value: \"\\\"25..99-edits\\\"\")  @join__enumValue(graph: WIKI) \n  _100___edits @enum(subgraph: \"Wiki\", value: \"\\\"100..-edits\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe time unit for the response data. As of today, supported values are\ndaily and monthly.\n\"\"\"\nenum queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging\nto the bot group but having bot-like names) or user (registered account not in bot\ngroup nor having bot-like name). If you are interested in edits regardless of\ntheir editor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (new pages in content\nnamespaces) or non-content (new pages in non-content namespaces). If you are\ninterested in new-articles regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe time unit for the response data. As of today, supported values are\ndaily and monthly.\n\"\"\"\nenum queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging\nto the bot group but having bot-like names) or user (registered account not in bot\ngroup nor having bot-like name). If you are interested in edits regardless\nof their editor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (edits made in content\nnamespaces) or non-content (edits made in non-content namespaces). If you are\ninterested in editors regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by activity-level, use one of 1..4-edits, 5..24-edits,\n25..99-edits or 100..-edits. If you are interested in editors regardless\nof their activity-level, use all-activity-levels.\n\"\"\"\nenum queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level @join__type(graph: WIKI)  {\n  all_activity_levels @enum(subgraph: \"Wiki\", value: \"\\\"all-activity-levels\\\"\")  @join__enumValue(graph: WIKI) \n  _1__4_edits @enum(subgraph: \"Wiki\", value: \"\\\"1..4-edits\\\"\")  @join__enumValue(graph: WIKI) \n  _5__24_edits @enum(subgraph: \"Wiki\", value: \"\\\"5..24-edits\\\"\")  @join__enumValue(graph: WIKI) \n  _25__99_edits @enum(subgraph: \"Wiki\", value: \"\\\"25..99-edits\\\"\")  @join__enumValue(graph: WIKI) \n  _100___edits @enum(subgraph: \"Wiki\", value: \"\\\"100..-edits\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe time unit for the response data. As of today, supported values are\ndaily and monthly.\n\"\"\"\nenum queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging\nto the bot group but having bot-like names) or user (registered account not in bot\ngroup nor having bot-like name). If you are interested in edits regardless\nof their editor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n\"\"\"\nenum queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI)  {\n  all_page_types @enum(subgraph: \"Wiki\", value: \"\\\"all-page-types\\\"\")  @join__enumValue(graph: WIKI) \n  content @join__enumValue(graph: WIKI) \n  non_content @enum(subgraph: \"Wiki\", value: \"\\\"non-content\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe time unit for the response data. As of today, supported values are\ndaily and monthly.\n\"\"\"\nenum queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n\"\"\"\nenum queryInput_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI)  {\n  all_editor_types @enum(subgraph: \"Wiki\", value: \"\\\"all-editor-types\\\"\")  @join__enumValue(graph: WIKI) \n  anonymous @join__enumValue(graph: WIKI) \n  group_bot @enum(subgraph: \"Wiki\", value: \"\\\"group-bot\\\"\")  @join__enumValue(graph: WIKI) \n  name_bot @enum(subgraph: \"Wiki\", value: \"\\\"name-bot\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nTime unit for the response data. As of today, supported values are daily and monthly\n\"\"\"\nenum queryInput_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by access site, use one of desktop-site or mobile-site. If you are interested in pagecounts regardless of access site use all-sites.\n\"\"\"\nenum queryInput_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_access_site @join__type(graph: WIKI)  {\n  all_sites @enum(subgraph: \"Wiki\", value: \"\\\"all-sites\\\"\")  @join__enumValue(graph: WIKI) \n  desktop_site @enum(subgraph: \"Wiki\", value: \"\\\"desktop-site\\\"\")  @join__enumValue(graph: WIKI) \n  mobile_site @enum(subgraph: \"Wiki\", value: \"\\\"mobile-site\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe time unit for the response data. As of today, the supported granularities for\nthis endpoint are hourly, daily and monthly.\n\"\"\"\nenum queryInput_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  hourly @join__enumValue(graph: WIKI) \n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by access method, use one of desktop, mobile-app or mobile-web.\nIf you are interested in pageviews regardless of access method, use all-access.\n\"\"\"\nenum queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_access @join__type(graph: WIKI)  {\n  all_access @enum(subgraph: \"Wiki\", value: \"\\\"all-access\\\"\")  @join__enumValue(graph: WIKI) \n  desktop @join__enumValue(graph: WIKI) \n  mobile_app @enum(subgraph: \"Wiki\", value: \"\\\"mobile-app\\\"\")  @join__enumValue(graph: WIKI) \n  mobile_web @enum(subgraph: \"Wiki\", value: \"\\\"mobile-web\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by agent type, use one of user or spider. If you are interested\nin pageviews regardless of agent type, use all-agents.\n\"\"\"\nenum queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_agent @join__type(graph: WIKI)  {\n  all_agents @enum(subgraph: \"Wiki\", value: \"\\\"all-agents\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n  spider @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe time unit for the response data. As of today, the supported granularities for this\nendpoint are hourly, daily, and monthly.\n\"\"\"\nenum queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  hourly @join__enumValue(graph: WIKI) \n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by access method, use one of desktop, mobile-app\nor mobile-web. If you are interested in pageviews regardless of access method,\nuse all-access.\n\"\"\"\nenum queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_access @join__type(graph: WIKI)  {\n  all_access @enum(subgraph: \"Wiki\", value: \"\\\"all-access\\\"\")  @join__enumValue(graph: WIKI) \n  desktop @join__enumValue(graph: WIKI) \n  mobile_app @enum(subgraph: \"Wiki\", value: \"\\\"mobile-app\\\"\")  @join__enumValue(graph: WIKI) \n  mobile_web @enum(subgraph: \"Wiki\", value: \"\\\"mobile-web\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by agent type, use one of user, bot or spider. If you are\ninterested in pageviews regardless of agent type, use all-agents.\n\"\"\"\nenum queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_agent @join__type(graph: WIKI)  {\n  all_agents @enum(subgraph: \"Wiki\", value: \"\\\"all-agents\\\"\")  @join__enumValue(graph: WIKI) \n  user @join__enumValue(graph: WIKI) \n  spider @join__enumValue(graph: WIKI) \n  bot @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe time unit for the response data. As of today, the only supported granularity for\nthis endpoint is daily and monthly.\n\"\"\"\nenum queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by access method, use one of desktop, mobile-app or mobile-web.\nIf you are interested in pageviews regardless of access method, use all-access.\n\"\"\"\nenum queryInput_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_access @join__type(graph: WIKI)  {\n  all_access @enum(subgraph: \"Wiki\", value: \"\\\"all-access\\\"\")  @join__enumValue(graph: WIKI) \n  desktop @join__enumValue(graph: WIKI) \n  mobile_app @enum(subgraph: \"Wiki\", value: \"\\\"mobile-app\\\"\")  @join__enumValue(graph: WIKI) \n  mobile_web @enum(subgraph: \"Wiki\", value: \"\\\"mobile-web\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by access method, use one of desktop, mobile-app or mobile-web.\nIf you are interested in pageviews regardless of access method, use all-access.\n\"\"\"\nenum queryInput_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_access @join__type(graph: WIKI)  {\n  all_access @enum(subgraph: \"Wiki\", value: \"\\\"all-access\\\"\")  @join__enumValue(graph: WIKI) \n  desktop @join__enumValue(graph: WIKI) \n  mobile_app @enum(subgraph: \"Wiki\", value: \"\\\"mobile-app\\\"\")  @join__enumValue(graph: WIKI) \n  mobile_web @enum(subgraph: \"Wiki\", value: \"\\\"mobile-web\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe time unit for the response data. As of today, supported values are\ndaily and monthly.\n\"\"\"\nenum queryInput_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nIf you want to filter by accessed site, use one of desktop-site or mobile-site.\nIf you are interested in unique devices regardless of accessed site, use or all-sites.\n\"\"\"\nenum queryInput_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_access_site @join__type(graph: WIKI)  {\n  all_sites @enum(subgraph: \"Wiki\", value: \"\\\"all-sites\\\"\")  @join__enumValue(graph: WIKI) \n  desktop_site @enum(subgraph: \"Wiki\", value: \"\\\"desktop-site\\\"\")  @join__enumValue(graph: WIKI) \n  mobile_site @enum(subgraph: \"Wiki\", value: \"\\\"mobile-site\\\"\")  @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe time unit for the response data. As of today, the supported granularities\nfor this endpoint are daily and monthly.\n\"\"\"\nenum queryInput_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI)  {\n  daily @join__enumValue(graph: WIKI) \n  monthly @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe tool category to list tools and language pairs for\n\"\"\"\nenum queryInput_transform_list_tool_by_tool_tool @join__type(graph: WIKI)  {\n  mt @join__enumValue(graph: WIKI) \n  dictionary @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe tool category to list tools and language pairs for\n\"\"\"\nenum queryInput_transform_list_tool_by_tool_by_from_tool @join__type(graph: WIKI)  {\n  mt @join__enumValue(graph: WIKI) \n  dictionary @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe tool category to list tools and language pairs for\n\"\"\"\nenum queryInput_transform_list_tool_by_tool_by_from_by_to_tool @join__type(graph: WIKI)  {\n  mt @join__enumValue(graph: WIKI) \n  dictionary @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe dictionary provider id\n\"\"\"\nenum queryInput_transform_word_from_by_from_lang_to_by_to_lang_by_word_by_provider_provider @join__type(graph: WIKI)  {\n  JsonDict @join__enumValue(graph: WIKI) \n  Dictd @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe input type of the given formula; can be tex or inline-tex\n\"\"\"\nenum mutationInput_post_media_math_check_by_type_type @join__type(graph: WIKI)  {\n  tex @join__enumValue(graph: WIKI) \n  inline_tex @enum(subgraph: \"Wiki\", value: \"\\\"inline-tex\\\"\")  @join__enumValue(graph: WIKI) \n  chem @join__enumValue(graph: WIKI) \n}\n\n\"\"\"\nThe machine translation provider id\n\"\"\"\nenum mutationInput_post_transform_html_from_by_from_lang_to_by_to_lang_by_provider_provider @join__type(graph: WIKI)  {\n  Apertium @join__enumValue(graph: WIKI) \n  Yandex @join__enumValue(graph: WIKI) \n  Youdao @join__enumValue(graph: WIKI) \n}\n\nenum HTTPMethod @join__type(graph: WIKI)  {\n  GET @join__enumValue(graph: WIKI) \n  HEAD @join__enumValue(graph: WIKI) \n  POST @join__enumValue(graph: WIKI) \n  PUT @join__enumValue(graph: WIKI) \n  DELETE @join__enumValue(graph: WIKI) \n  CONNECT @join__enumValue(graph: WIKI) \n  OPTIONS @join__enumValue(graph: WIKI) \n  TRACE @join__enumValue(graph: WIKI) \n  PATCH @join__enumValue(graph: WIKI) \n}\n    "